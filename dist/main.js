!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e,n){t.exports=n.p+"8d71999d5a674b4774400967aa1e8503.png"},function(t,e){var n=t.exports={};function r(t){return(t%360+360)%360}function o(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}n.rgb2Hsl=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}t=255===t?1:t%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255),n=255===n?1:n%255/parseFloat(255);var r,o,s=Math.max(t,e,n),a=Math.min(t,e,n),i=(s+a)/2;if(s===a)r=o=0;else{var c=s-a;switch(o=i>.5?c/(2-s-a):c/(s+a),s){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:Math.round(360*r),s:Math.round(100*o),l:Math.round(100*i)}},n.rgb_to_hsl=n.rgbToHsl=n.rgb2Hsl,n.rgb2Hsv=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}t=255===t?1:t%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255),n=255===n?1:n%255/parseFloat(255);var r,o,s=Math.max(t,e,n),a=Math.min(t,e,n),i=s,c=s-a;if(o=0===s?0:c/s,s===a)r=0;else{switch(s){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:Math.round(360*r),s:Math.round(100*o),v:Math.round(100*i)}},n.rgb_to_hsv=n.rgbToHsv=n.rgb2Hsv,n.hsl2Rgb=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.l}var s,a,i;if(t=360===(t=r(t))?1:t%360/parseFloat(360),e=100===e?1:e%100/parseFloat(100),n=100===n?1:n%100/parseFloat(100),0===e)s=a=i=n;else{var c=n<.5?n*(1+e):n+e-n*e,l=2*n-c;s=o(l,c,t+1/3),a=o(l,c,t),i=o(l,c,t-1/3)}return{r:Math.round(255*s),g:Math.round(255*a),b:Math.round(255*i)}},n.hsl_to_rgb=n.hslToRgb=n.hsl2Rgb,n.hsv2Rgb=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.v}t=360===(t=r(t))?1:t%360/parseFloat(360)*6,e=100===e?1:e%100/parseFloat(100),n=100===n?1:n%100/parseFloat(100);var o=Math.floor(t),s=t-o,a=n*(1-e),i=n*(1-s*e),c=n*(1-(1-s)*e),l=o%6,u=[n,i,a,a,c,n][l],f=[c,n,n,i,a,a][l],h=[a,a,c,n,n,i][l];return{r:Math.floor(255*u),g:Math.floor(255*f),b:Math.floor(255*h)}},n.hsv_to_rgb=n.hsv2Rgb,n.hsvToRgb=n.hsv2Rgb,n.rgb2Hex=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}return t=Math.round(t).toString(16),e=Math.round(e).toString(16),n=Math.round(n).toString(16),"#"+(t=1===t.length?"0"+t:t)+(e=1===e.length?"0"+e:e)+(n=1===n.length?"0"+n:n)},n.rgb_to_hex=n.rgbToHex=n.rgb2Hex,n.hex2Rgb=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null},n.hex_to_rgb=n.hexToRgb=n.hex2Rgb,n.hsv2Hex=function(t,e,r){var o=n.hsv2Rgb(t,e,r);return n.rgb2Hex(o.r,o.g,o.b)},n.hsv_to_hex=n.hsv2Hex,n.hsvToHex=n.hsv2Hex,n.hex2Hsv=function(t){var e=n.hex2Rgb(t);return n.rgb2Hsv(e.r,e.g,e.b)},n.hex_to_hsv=n.hexToHsv=n.hex2Hsv,n.hsl2Hex=function(t,e,r){var o=n.hsl2Rgb(t,e,r);return n.rgb2Hex(o.r,o.g,o.b)},n.hsl_to_hex=n.hslToHex=n.hsl2Hex,n.hex2Hsl=function(t){var e=n.hex2Rgb(t);return n.rgb2Hsl(e.r,e.g,e.b)},n.hex_to_hsl=n.hexToHsl=n.hex2Hsl,n.rgb2Cmyk=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}var r=t/255,o=e/255,s=n/255,a=1-Math.max(r,o,s),i=(1-o-a)/(1-a),c=(1-s-a)/(1-a);return{c:((1-r-a)/(1-a)).toFixed(3),m:i.toFixed(3),y:c.toFixed(3),k:a.toFixed(3)}},n.rgb_to_cmyk=n.rgbToCmyk=n.rgb2Cmyk,n.cmyk2Rgb=function(t,e,n,r){if("object"==typeof t){const o=t;t=o.c,e=o.m,n=o.y,r=o.k}var o=255*(1-t)*(1-r),s=255*(1-e)*(1-r),a=255*(1-n)*(1-r);return{r:Math.floor(o),g:Math.floor(s),b:Math.floor(a)}},n.cmyk_to_rgb=n.cmykToRgb=n.cmyk2Rgb,n.hsv2Hsl=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.v}var r=(2-e)*n/2;return 0!==r&&(e=100===r?0:r<50?e*n/(2*r):e*n/(2-2*r)),{h:t,s:e,l:r}},n.hsv_to_hsl=n.hsvToHsl=n.hsv2Hsl,n.hsl2Hsv=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.l}return e*=n<50?n:100-n,{h:t,s:Math.floor(2*e/(n+e)),v:Math.floor(n+e)}},n.hsl_to_hsv=n.hslToHsv=n.hsl2Hsv,n.parseCss=function(t){if(t.indexOf("#")>-1)return n.hex2Rgb(t);const e=t.split("(")[0],r=t.split("(")[1].split(")")[0].split(",");return e.split("").reduce(function(t,e,n){const o=t;return o[e]=parseFloat(r[n]),o},{})},n.parse_css=n.parseCss,n.stringify=function(t){return Object.keys(t).join("")+"("+Object.keys(t).map(function(e){var n=t[e];return"s"!==e&&"v"!==e&&"l"!==e||(n+="%"),n}).join(", ")+")"},n.random=function(){return"#"+("000000"+Math.floor(16777215*Math.random()).toString(16)).substr(-6)},n.rotateHue=function(t,e){void 0===e&&(e=0);const n="object"==typeof t?(t.h+e)%360:(t+e)%360,r=n<0?360+n:n;return"object"==typeof t?Object.assign(t,{h:r}):r},n.getColorEncoding=function(t){if("string"==typeof t)try{return n.hex2Rgb(t),"hex"}catch(t){}return"object"!=typeof t?"unknown":t.r&&t.g&&t.b?"rgb":t.h&&t.s&&t.v?"hsv":t.h&&t.s&&t.l?"hsl":t.c&&t.m&&t.y&&t.k?"cmyk":"unknown"}},function(t,e,n){var r=n(3);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,"\nbody {\n  font-family: sans-serif;\n}\n\ncanvas {\n  display: block;\n  margin-bottom: 1em;\n}\n\nh1 {\n  color: red;\n}\n\n\n.container-block {\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n}\n\n.container-line {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n.canvas-holder {\n  margin-right: 2em;\n  flex: auto 1 1;\n}\n\n.canvas-holder a {\n  font-weight: 500;\n  border: 1px solid black;\n  background-color: #cabfbf;\n  padding: 2px 3px;\n  text-decoration: none;\n}\n\n.canvas-holder a.available {\n  background-color: #f98e52;\n  cursor: pointer;\n}\n\n.canvas-holder a.available:hover,\n .canvas-holder a.available:active {\n  color: white;\n}\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),s=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(s).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(r[s]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),s=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,i=0,c=[],l=n(6);function u(t,e){for(var n=0;n<t.length;n++){var o=t[n],s=r[o.id];if(s){s.refs++;for(var a=0;a<s.parts.length;a++)s.parts[a](o.parts[a]);for(;a<o.parts.length;a++)s.parts.push(v(o.parts[a],e))}else{var i=[];for(a=0;a<o.parts.length;a++)i.push(v(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:i}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var s=t[o],a=e.base?s[0]+e.base:s[0],i={css:s[1],media:s[2],sourceMap:s[3]};r[a]?r[a].parts.push(i):n.push(r[a]={id:a,parts:[i]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function p(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function v(t,e){var n,r,o,s;if(e.transform&&t.css){if(!(s=e.transform(t.css)))return function(){};t.css=s}if(e.singleton){var c=i++;n=a||(a=p(e)),r=m.bind(null,n,c,!1),o=m.bind(null,n,c,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,s=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||s)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),i=t.href;t.href=URL.createObjectURL(a),i&&URL.revokeObjectURL(i)}.bind(null,n,e),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return u(n,e),function(t){for(var o=[],s=0;s<n.length;s++){var a=n[s];(i=r[a.id]).refs--,o.push(i)}t&&u(f(t,e),e);for(s=0;s<o.length;s++){var i;if(0===(i=o[s]).refs){for(var c=0;c<i.parts.length;c++)i.parts[c]();delete r[i.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function m(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var s=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(s,a[e]):t.appendChild(s)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,s=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?t:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:r+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){"use strict";n.r(e);const r=n(1),o=(t,e,n)=>t.map(t=>{let[r,o,s]=t,a=e(r,o,s);return{r:r,g:o,b:s,[n]:a[n]}}),s=(t,e,n,s,a,i)=>{let c=n/2,l=[],u=[];for(let t=e/2;t<s;t+=e)l.push(t);for(let t=c;t<a;t+=n)u.push(t);const f=l.reduce((t,e)=>{let n=u.map(t=>[t,e]);return t.concat(n)},[]).map(e=>{return t.getImageData(e[0],e[1],1,1).data});return"l"===i?(t=>{return o(t,r.rgb_to_hsl,"l").sort((t,e)=>t.l-e.l)})(f):"v"===i?(t=>{return o(t,r.rgb_to_hsv,"v").sort((t,e)=>t.v-e.v)})(f):void 0};n(2);var a=n(0),i=n.n(a);const c=500,l=300,u=()=>{let t=d("canvas",c,l),e=new Image;e.src=i.a,e.crossorigin="anonymous",e.addEventListener("load",()=>{t.drawImage(e,0,0,l,c),localStorage.setItem("savedImageData",canvas.toDataURL("blocks1/png"))},!1),document.getElementById("run-analysis").addEventListener("click",()=>{const e=s(t,31.25,33.33333,c,l,"l"),n=s(t,31.25,33.33333,c,l,"v");f(e,n)},!1)},f=(t,e)=>{h(t,c,l,"blockLightness"),h(e,c,l,"blockBrightness"),h(t,31.25,33.33333*144,"lineLightness"),h(e,31.25,33.33333*144,"lineBrightness")},h=(t,e,n,r)=>{let o=d(r,e,n),s=[],a=[];for(let t=0;t<e;t+=31.25)a.push(t);for(let t=0;t<n;t+=33.33333)s.push(t);s.reduce((t,e)=>{let n=a.map(t=>[e,t]);return t.concat(n)},[]).forEach((e,n)=>{o.fillRect(e[0],e[1],33.33333,31.25),t[n]?o.fillStyle=`rgb(${t[n].r}, ${t[n].g}, ${t[n].b})`:o.fillStyle="green"}),((t,e)=>{const n=document.getElementById(`${t}-download`);n.addEventListener("click",()=>{const r=document.getElementById(`${t}`);n.href=r.toDataURL(),n.download=`${e}-${t}`},!1),n.classList.add("available")})(r,"sunset-1")},d=(t,e,n)=>{const r=document.getElementById(t);return r.height=e,r.width=n,r.getContext("2d")};window.onload=(()=>{u()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,