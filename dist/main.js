!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e){var n=t.exports={};function r(t){return(t%360+360)%360}function o(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}n.rgb2Hsl=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}t=255===t?1:t%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255),n=255===n?1:n%255/parseFloat(255);var r,o,a=Math.max(t,e,n),s=Math.min(t,e,n),i=(a+s)/2;if(a===s)r=o=0;else{var c=a-s;switch(o=i>.5?c/(2-a-s):c/(a+s),a){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:Math.round(360*r),s:Math.round(100*o),l:Math.round(100*i)}},n.rgb_to_hsl=n.rgbToHsl=n.rgb2Hsl,n.rgb2Hsv=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}t=255===t?1:t%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255),n=255===n?1:n%255/parseFloat(255);var r,o,a=Math.max(t,e,n),s=Math.min(t,e,n),i=a,c=a-s;if(o=0===a?0:c/a,a===s)r=0;else{switch(a){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:Math.round(360*r),s:Math.round(100*o),v:Math.round(100*i)}},n.rgb_to_hsv=n.rgbToHsv=n.rgb2Hsv,n.hsl2Rgb=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.l}var a,s,i;if(t=360===(t=r(t))?1:t%360/parseFloat(360),e=100===e?1:e%100/parseFloat(100),n=100===n?1:n%100/parseFloat(100),0===e)a=s=i=n;else{var c=n<.5?n*(1+e):n+e-n*e,l=2*n-c;a=o(l,c,t+1/3),s=o(l,c,t),i=o(l,c,t-1/3)}return{r:Math.round(255*a),g:Math.round(255*s),b:Math.round(255*i)}},n.hsl_to_rgb=n.hslToRgb=n.hsl2Rgb,n.hsv2Rgb=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.v}t=360===(t=r(t))?1:t%360/parseFloat(360)*6,e=100===e?1:e%100/parseFloat(100),n=100===n?1:n%100/parseFloat(100);var o=Math.floor(t),a=t-o,s=n*(1-e),i=n*(1-a*e),c=n*(1-(1-a)*e),l=o%6,u=[n,i,s,s,c,n][l],f=[c,n,n,i,s,s][l],h=[s,s,c,n,n,i][l];return{r:Math.floor(255*u),g:Math.floor(255*f),b:Math.floor(255*h)}},n.hsv_to_rgb=n.hsv2Rgb,n.hsvToRgb=n.hsv2Rgb,n.rgb2Hex=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}return t=Math.round(t).toString(16),e=Math.round(e).toString(16),n=Math.round(n).toString(16),"#"+(t=1===t.length?"0"+t:t)+(e=1===e.length?"0"+e:e)+(n=1===n.length?"0"+n:n)},n.rgb_to_hex=n.rgbToHex=n.rgb2Hex,n.hex2Rgb=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null},n.hex_to_rgb=n.hexToRgb=n.hex2Rgb,n.hsv2Hex=function(t,e,r){var o=n.hsv2Rgb(t,e,r);return n.rgb2Hex(o.r,o.g,o.b)},n.hsv_to_hex=n.hsv2Hex,n.hsvToHex=n.hsv2Hex,n.hex2Hsv=function(t){var e=n.hex2Rgb(t);return n.rgb2Hsv(e.r,e.g,e.b)},n.hex_to_hsv=n.hexToHsv=n.hex2Hsv,n.hsl2Hex=function(t,e,r){var o=n.hsl2Rgb(t,e,r);return n.rgb2Hex(o.r,o.g,o.b)},n.hsl_to_hex=n.hslToHex=n.hsl2Hex,n.hex2Hsl=function(t){var e=n.hex2Rgb(t);return n.rgb2Hsl(e.r,e.g,e.b)},n.hex_to_hsl=n.hexToHsl=n.hex2Hsl,n.rgb2Cmyk=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}var r=t/255,o=e/255,a=n/255,s=1-Math.max(r,o,a),i=(1-o-s)/(1-s),c=(1-a-s)/(1-s);return{c:((1-r-s)/(1-s)).toFixed(3),m:i.toFixed(3),y:c.toFixed(3),k:s.toFixed(3)}},n.rgb_to_cmyk=n.rgbToCmyk=n.rgb2Cmyk,n.cmyk2Rgb=function(t,e,n,r){if("object"==typeof t){const o=t;t=o.c,e=o.m,n=o.y,r=o.k}var o=255*(1-t)*(1-r),a=255*(1-e)*(1-r),s=255*(1-n)*(1-r);return{r:Math.floor(o),g:Math.floor(a),b:Math.floor(s)}},n.cmyk_to_rgb=n.cmykToRgb=n.cmyk2Rgb,n.hsv2Hsl=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.v}var r=(2-e)*n/2;return 0!==r&&(e=100===r?0:r<50?e*n/(2*r):e*n/(2-2*r)),{h:t,s:e,l:r}},n.hsv_to_hsl=n.hsvToHsl=n.hsv2Hsl,n.hsl2Hsv=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.l}return e*=n<50?n:100-n,{h:t,s:Math.floor(2*e/(n+e)),v:Math.floor(n+e)}},n.hsl_to_hsv=n.hslToHsv=n.hsl2Hsv,n.parseCss=function(t){if(t.indexOf("#")>-1)return n.hex2Rgb(t);const e=t.split("(")[0],r=t.split("(")[1].split(")")[0].split(",");return e.split("").reduce(function(t,e,n){const o=t;return o[e]=parseFloat(r[n]),o},{})},n.parse_css=n.parseCss,n.stringify=function(t){return Object.keys(t).join("")+"("+Object.keys(t).map(function(e){var n=t[e];return"s"!==e&&"v"!==e&&"l"!==e||(n+="%"),n}).join(", ")+")"},n.random=function(){return"#"+("000000"+Math.floor(16777215*Math.random()).toString(16)).substr(-6)},n.rotateHue=function(t,e){void 0===e&&(e=0);const n="object"==typeof t?(t.h+e)%360:(t+e)%360,r=n<0?360+n:n;return"object"==typeof t?Object.assign(t,{h:r}):r},n.getColorEncoding=function(t){if("string"==typeof t)try{return n.hex2Rgb(t),"hex"}catch(t){}return"object"!=typeof t?"unknown":t.r&&t.g&&t.b?"rgb":t.h&&t.s&&t.v?"hsv":t.h&&t.s&&t.l?"hsl":t.c&&t.m&&t.y&&t.k?"cmyk":"unknown"}},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"\nbody {\n  font-family: sans-serif;\n}\n\ncanvas {\n  display: block;\n  margin-bottom: 1em;\n  margin-top: 1em;\n}\n\nh1 {\n  color: red;\n}\n\ndiv.upload-wrapper {\n  position: relative;\n  overflow: hidden;\n  display: block;\n}\n\ndiv.upload-wrapper input[type=file] {\n  font-size: 100px;\n  position: absolute;\n  left: 0;\n  top: 0;\n  opacity: 0;\n}\n\nbutton.photo-submitter,\nbutton#run-analysis {\n  padding: .5em;\n  font-weight: 500;\n  font-size: 1.1em;\n  cursor: pointer;\n  margin-bottom: 1em;\n}\n\nbutton#run-analysis {\n  background-color: red;\n  color: white;\n}\nbutton#run-analysis:hover{\n  background-color: #bd2c23;\n}\n\nbutton.photo-submitter {\n  background-color: purple;\n  color: white;\n}\nbutton.photo-submitter:hover {\n  background-color: #3e153e;\n}\n\n.container-block {\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n}\n\n.container-line {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n.canvas-holder {\n  margin-right: 2em;\n  flex: auto 1 1;\n}\n\n.canvas-holder a {\n  font-weight: 500;\n  border: 1px solid black;\n  background-color: #cabfbf;\n  padding: 2px 3px;\n  text-decoration: none;\n}\n\n.canvas-holder a.available {\n  background-color: #f98e52;\n  cursor: pointer;\n}\n\n.canvas-holder a.available:hover,\n .canvas-holder a.available:active {\n  color: white;\n}\n\n@media (max-width: 700px) {\n  .container-block {\n    flex-direction: column;\n  }\n}\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),s=null,i=0,c=[],l=n(5);function u(t,e){for(var n=0;n<t.length;n++){var o=t[n],a=r[o.id];if(a){a.refs++;for(var s=0;s<a.parts.length;s++)a.parts[s](o.parts[s]);for(;s<o.parts.length;s++)a.parts.push(v(o.parts[s],e))}else{var i=[];for(s=0;s<o.parts.length;s++)i.push(v(o.parts[s],e));r[o.id]={id:o.id,refs:1,parts:i}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var a=t[o],s=e.base?a[0]+e.base:a[0],i={css:a[1],media:a[2],sourceMap:a[3]};r[s]?r[s].parts.push(i):n.push(r[s]={id:s,parts:[i]})}return n}function h(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function p(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function v(t,e){var n,r,o,a;if(e.transform&&t.css){if(!(a=e.transform(t.css)))return function(){};t.css=a}if(e.singleton){var c=i++;n=s||(s=p(e)),r=m.bind(null,n,c,!1),o=m.bind(null,n,c,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,a=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||a)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),i=t.href;t.href=URL.createObjectURL(s),i&&URL.revokeObjectURL(i)}.bind(null,n,e),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return u(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var s=n[a];(i=r[s.id]).refs--,o.push(i)}t&&u(f(t,e),e);for(a=0;a<o.length;a++){var i;if(0===(i=o[a]).refs){for(var c=0;c<i.parts.length;c++)i.parts[c]();delete r[i.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function m(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var a=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(a,s[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){t.exports=n.p+"8d71999d5a674b4774400967aa1e8503.png"},function(t,e,n){"use strict";n.r(e);const r=n(0),o=(t,e,n)=>t.map(t=>{let[r,o,a]=t,s=e(r,o,a);return{r:r,g:o,b:a,[n]:s[n]}}),a=(t,e,n,a,s,i)=>{let c=n/2,l=[],u=[];for(let t=e/2;t<a;t+=e)l.push(t);for(let t=c;t<s;t+=n)u.push(t);const f=l.reduce((t,e)=>{let n=u.map(t=>[t,e]);return t.concat(n)},[]).map(e=>{return t.getImageData(e[0],e[1],1,1).data});return"l"===i?(t=>{return o(t,r.rgb_to_hsl,"l").sort((t,e)=>t.l-e.l)})(f):"v"===i?(t=>{return o(t,r.rgb_to_hsv,"v").sort((t,e)=>t.v-e.v)})(f):void 0},s=(t,e,n,r,o,a,s)=>{let c=i(r,e,n),l=[],u=[];for(let t=0;t<e;t+=o)u.push(t);for(let t=0;t<n;t+=a)l.push(t);l.reduce((t,e)=>{let n=u.map(t=>[e,t]);return t.concat(n)},[]).forEach((e,n)=>{c.fillRect(e[0],e[1],a,o),t[n]?c.fillStyle=`rgb(${t[n].r}, ${t[n].g}, ${t[n].b})`:c.fillStyle="green"}),((t,e)=>{const n=document.getElementById(`${t}-download`);n.addEventListener("click",()=>{const r=document.getElementById(`${t}`);n.href=r.toDataURL(),n.download=`${e}-${t}`},!1),n.classList.add("available")})(r,s)},i=(t,e,n)=>{const r=document.getElementById(t);return r.height=e,r.width=n,r.getContext("2d")};n(1),n(6);const c=()=>{document.getElementById("photo-submitter").addEventListener("change",l,!1)},l=t=>{let e=t.target.files[0],n=e.name,r=(new FileReader,i("canvas",500,300)),o=new Image;o.crossorigin="anonymous",o.onload=(()=>{r.drawImage(o,0,0,300,500),URL.revokeObjectURL(o.src)}),o.src=URL.createObjectURL(e),u(r,n)},u=(t,e)=>{document.getElementById("run-analysis").addEventListener("click",()=>{const e=a(t,31.25,33.33333,500,300,"l"),n=a(t,31.25,33.33333,500,300,"v");f(e,n)},!1)},f=(t,e)=>{s(t,500,300,"blockLightness",31.25,33.33333),s(e,500,300,"blockBrightness",31.25,33.33333),s(t,31.25,33.33333*144,"lineLightness",31.25,33.33333),s(e,31.25,33.33333*144,"lineBrightness",31.25,33.33333)};window.onload=(()=>{c()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbG9yc3lzL2NvbG9yc3lzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMuY3NzPzAyYWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MxLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sb3VyU29ydGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb2xvdXJHZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbG9yRHJhd2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9maWxlaGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb2xvcnN5cyIsIl9ub3JtYWxpemVBbmdsZSIsImRlZ3JlZXMiLCJfaHVlMlJnYiIsInEiLCJyZ2IySHNsIiwiZyIsImIiLCJhcmdzIiwicGFyc2VGbG9hdCIsImgiLCJtYXgiLCJNYXRoIiwibWluIiwicm91bmQiLCJyZ2JfdG9faHNsIiwicmdiVG9Ic2wiLCJyZ2IySHN2IiwidiIsInJnYl90b19oc3YiLCJyZ2JUb0hzdiIsImhzbDJSZ2IiLCJoc2xfdG9fcmdiIiwiaHNsVG9SZ2IiLCJoc3YyUmdiIiwiZmxvb3IiLCJmIiwibW9kIiwiaHN2X3RvX3JnYiIsImhzdlRvUmdiIiwicmdiMkhleCIsInRvU3RyaW5nIiwibGVuZ3RoIiwicmdiX3RvX2hleCIsInJnYlRvSGV4IiwiaGV4MlJnYiIsImhleCIsInJlc3VsdCIsImV4ZWMiLCJwYXJzZUludCIsImhleF90b19yZ2IiLCJoZXhUb1JnYiIsImhzdjJIZXgiLCJyZ2IiLCJoc3ZfdG9faGV4IiwiaHN2VG9IZXgiLCJoZXgySHN2IiwiaGV4X3RvX2hzdiIsImhleFRvSHN2IiwiaHNsMkhleCIsImhzbF90b19oZXgiLCJoc2xUb0hleCIsImhleDJIc2wiLCJoZXhfdG9faHNsIiwiaGV4VG9Ic2wiLCJyZ2IyQ215ayIsInJwcmltIiwiZ3ByaW0iLCJicHJpbSIsImsiLCJ5IiwidG9GaXhlZCIsInJnYl90b19jbXlrIiwicmdiVG9DbXlrIiwiY215azJSZ2IiLCJjbXlrX3RvX3JnYiIsImNteWtUb1JnYiIsImhzdjJIc2wiLCJTVl9NQVgiLCJoc3ZfdG9faHNsIiwiaHN2VG9Ic2wiLCJoc2wySHN2IiwiaHNsX3RvX2hzdiIsImhzbFRvSHN2IiwicGFyc2VDc3MiLCJjc3NTdHJpbmciLCJpbmRleE9mIiwicHJlZml4Iiwic3BsaXQiLCJyZWR1Y2UiLCJjb2xvciIsInBhcmFtIiwiaWR4IiwibmV4dENvbG9yIiwicGFyc2VfY3NzIiwic3RyaW5naWZ5Iiwib2JqIiwia2V5cyIsImpvaW4iLCJtYXAiLCJ2YWwiLCJyYW5kb20iLCJzdWJzdHIiLCJyb3RhdGVIdWUiLCJodWUiLCJhbW91bnQiLCJhdXgiLCJuZXh0SHVlIiwiYXNzaWduIiwiZ2V0Q29sb3JFbmNvZGluZyIsImVyciIsImNvbnRlbnQiLCJvcHRpb25zIiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsInVuZGVmaW5lZCIsImxvY2FscyIsInB1c2giLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidGhpcyIsIml0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImZuIiwibWVtbyIsImFwcGx5IiwiYXJndW1lbnRzIiwibWVtb2l6ZSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsImFkZEF0dHJzIiwiZWwiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwidXBkYXRlIiwicmVtb3ZlIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCIkMSIsInRlc3QiLCJhZGRUb0NvbG9yIiwiZGF0YSIsImZ1bmMiLCJwcm9wIiwibmV3Q29sb3IiLCJbb2JqZWN0IE9iamVjdF0iLCJnZXRQaXhlbERhdGEiLCJjdHgiLCJibG9ja0hlaWdodCIsImJsb2NrV2lkdGgiLCJoZWlnaHQiLCJ3aWR0aCIsImNvbG9yUHJvcCIsImhjQmxvY2siLCJ2UG9pbnRzIiwiaFBvaW50cyIsImNvbG9yRGF0YSIsImFjYyIsImN1cnIiLCJyb3ciLCJocG9pbnQiLCJwb2ludCIsImdldEltYWdlRGF0YSIsInNvcnQiLCJhIiwic29ydExpZ2h0bmVzcyIsInNvcnRCcmlnaHRuZXNzIiwiZHJhd2VyT3V0cHV0Iiwib3JpZ0NvbG9ycyIsImZpbGVuYW1lIiwiY2FudmFzU2V0VXAiLCJ4U3RhcnRQb2ludHMiLCJ5U3RhcnRQb2ludHMiLCJ5UG9pbnQiLCJjb29yZCIsImZpbGxSZWN0IiwiZmlsbFN0eWxlIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2FudmFzIiwidG9EYXRhVVJMIiwiZG93bmxvYWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXR1cERvd25sb2FkQnV0dG9uIiwidyIsImN2cyIsImdldENvbnRleHQiLCJmaWxlU2VsZWN0b3IiLCJtb3VudEZpbGUiLCJmaWxlIiwiZmlsZXMiLCJGaWxlUmVhZGVyIiwiaW1nIiwiSW1hZ2UiLCJjcm9zc29yaWdpbiIsIm9ubG9hZCIsImRyYXdJbWFnZSIsInNyYyIsImRyYXdlciIsIm9yaWdDb2xvcnNMIiwib3JpZ0NvbG9yc0IiLCJjcmVhdGVOZXdDYW52YXNlcyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxX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RCxVQUFBSixFQUFBLElBaENBLElBREEsS0FrQ0E5RixJQUFBRSxnQkFBQTRGLEVBQUFLLE9BRUFMLEVBQUFLLElBQUFuRyxJQUFBQyxnQkFBQTBGLEdBQ0FTLEVBQUFwRCxFQUFBc0IsSUFHQThCLEVBQUEsQ0FBQXBELEVBQUFzQixLQUNBNUgsU0FBQW9JLGVBQUEsZ0JBQ0FDLGlCQUFBLGFBQ0EsTUFBQXNCLEVBQUF0RCxFQUFBQyxFQXJDQSxNQURBLFNBTEEsSUFDQSxJQTBDQSxLQUNBc0QsRUFBQXZELEVBQUFDLEVBdENBLE1BREEsU0FMQSxJQUNBLElBMkNBLEtBQ0F1RCxFQUFBRixFQUFBQyxLQUNHLElBR0hDLEVBQUEsQ0FBQUYsRUFBQUMsS0FFQWxDLEVBQUFpQyxFQW5EQSxJQUNBLElBa0RBLGlCQTdDQSxNQURBLFVBK0NBakMsRUFBQWtDLEVBcERBLElBQ0EsSUFtREEsa0JBOUNBLE1BREEsVUFrREFsQyxFQUFBaUMsRUFqREEsTUFEQSxTQUlBLElBOENBLGdCQWpEQSxNQURBLFVBbURBakMsRUFBQWtDLEVBbERBLE1BREEsU0FJQSxJQStDQSxpQkFsREEsTUFEQSxXQXNEQTdKLE9BQUF3SixPQUFBLE1BL0NBUiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuIiwiXG5jb25zdCBSR0JfTUFYID0gMjU1XG5jb25zdCBIVUVfTUFYID0gMzYwXG5jb25zdCBTVl9NQVggPSAxMDBcblxudmFyIGNvbG9yc3lzID0gbW9kdWxlLmV4cG9ydHMgPSB7fVxuXG5jb2xvcnN5cy5yZ2IySHNsID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcbiAgaWYgKHR5cGVvZiByID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGFyZ3MgPSByXG4gICAgciA9IGFyZ3MucjsgZyA9IGFyZ3MuZzsgYiA9IGFyZ3MuYjtcbiAgfVxuICAvLyBJdCBjb252ZXJ0cyBbMCwyNTVdIGZvcm1hdCwgdG8gWzAsMV1cbiAgciA9IChyID09PSBSR0JfTUFYKSA/IDEgOiAociAlIFJHQl9NQVggLyBwYXJzZUZsb2F0KFJHQl9NQVgpKVxuICBnID0gKGcgPT09IFJHQl9NQVgpID8gMSA6IChnICUgUkdCX01BWCAvIHBhcnNlRmxvYXQoUkdCX01BWCkpXG4gIGIgPSAoYiA9PT0gUkdCX01BWCkgPyAxIDogKGIgJSBSR0JfTUFYIC8gcGFyc2VGbG9hdChSR0JfTUFYKSlcblxuICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYilcbiAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpXG4gIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyXG5cbiAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgaCA9IHMgPSAwIC8vIGFjaHJvbWF0aWNcbiAgfSBlbHNlIHtcbiAgICB2YXIgZCA9IG1heCAtIG1pblxuICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKVxuICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICBjYXNlIHI6XG4gICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBnOlxuICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIGI6XG4gICAgICAgIGggPSAociAtIGcpIC8gZCArIDRcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaCAvPSA2XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGg6IE1hdGgucm91bmQoaCAqIEhVRV9NQVgpLFxuICAgIHM6IE1hdGgucm91bmQocyAqIFNWX01BWCksXG4gICAgbDogTWF0aC5yb3VuZChsICogU1ZfTUFYKVxuICB9XG59XG5cbmNvbG9yc3lzLnJnYl90b19oc2wgPSBjb2xvcnN5cy5yZ2JUb0hzbCA9IGNvbG9yc3lzLnJnYjJIc2xcblxuY29sb3JzeXMucmdiMkhzdiA9IGZ1bmN0aW9uIChyLCBnLCBiKSB7XG4gIGlmICh0eXBlb2YgciA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBhcmdzID0gclxuICAgIHIgPSBhcmdzLnI7IGcgPSBhcmdzLmc7IGIgPSBhcmdzLmI7XG4gIH1cblxuICAvLyBJdCBjb252ZXJ0cyBbMCwyNTVdIGZvcm1hdCwgdG8gWzAsMV1cbiAgciA9IChyID09PSBSR0JfTUFYKSA/IDEgOiAociAlIFJHQl9NQVggLyBwYXJzZUZsb2F0KFJHQl9NQVgpKVxuICBnID0gKGcgPT09IFJHQl9NQVgpID8gMSA6IChnICUgUkdCX01BWCAvIHBhcnNlRmxvYXQoUkdCX01BWCkpXG4gIGIgPSAoYiA9PT0gUkdCX01BWCkgPyAxIDogKGIgJSBSR0JfTUFYIC8gcGFyc2VGbG9hdChSR0JfTUFYKSlcblxuICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYilcbiAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpXG4gIHZhciBoLCBzLCB2ID0gbWF4XG5cbiAgdmFyIGQgPSBtYXggLSBtaW5cblxuICBzID0gbWF4ID09PSAwID8gMCA6IGQgLyBtYXhcblxuICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICBoID0gMCAvLyBhY2hyb21hdGljXG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChtYXgpIHtcbiAgICAgIGNhc2UgcjpcbiAgICAgICAgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIGc6XG4gICAgICAgIGggPSAoYiAtIHIpIC8gZCArIDJcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgYjpcbiAgICAgICAgaCA9IChyIC0gZykgLyBkICsgNFxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBoIC89IDZcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaDogTWF0aC5yb3VuZChoICogSFVFX01BWCksXG4gICAgczogTWF0aC5yb3VuZChzICogU1ZfTUFYKSxcbiAgICB2OiBNYXRoLnJvdW5kKHYgKiBTVl9NQVgpXG4gIH1cbn1cblxuY29sb3JzeXMucmdiX3RvX2hzdiA9IGNvbG9yc3lzLnJnYlRvSHN2ID0gY29sb3JzeXMucmdiMkhzdlxuXG5jb2xvcnN5cy5oc2wyUmdiID0gZnVuY3Rpb24gKGgsIHMsIGwpIHtcbiAgaWYgKHR5cGVvZiBoID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGFyZ3MgPSBoXG4gICAgaCA9IGFyZ3MuaDsgcyA9IGFyZ3MuczsgbCA9IGFyZ3MubDtcbiAgfVxuXG4gIHZhciByLCBnLCBiXG5cbiAgaCA9IF9ub3JtYWxpemVBbmdsZShoKVxuICBoID0gKGggPT09IEhVRV9NQVgpID8gMSA6IChoICUgSFVFX01BWCAvIHBhcnNlRmxvYXQoSFVFX01BWCkpXG4gIHMgPSAocyA9PT0gU1ZfTUFYKSA/IDEgOiAocyAlIFNWX01BWCAvIHBhcnNlRmxvYXQoU1ZfTUFYKSlcbiAgbCA9IChsID09PSBTVl9NQVgpID8gMSA6IChsICUgU1ZfTUFYIC8gcGFyc2VGbG9hdChTVl9NQVgpKVxuXG4gIGlmIChzID09PSAwKSB7XG4gICAgciA9IGcgPSBiID0gbCAvLyBhY2hyb21hdGljXG4gIH0gZWxzZSB7XG4gICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgIHIgPSBfaHVlMlJnYihwLCBxLCBoICsgMSAvIDMpXG4gICAgZyA9IF9odWUyUmdiKHAsIHEsIGgpXG4gICAgYiA9IF9odWUyUmdiKHAsIHEsIGggLSAxIC8gMylcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcjogTWF0aC5yb3VuZChyICogUkdCX01BWCksXG4gICAgZzogTWF0aC5yb3VuZChnICogUkdCX01BWCksXG4gICAgYjogTWF0aC5yb3VuZChiICogUkdCX01BWCksXG4gIH1cbn1cblxuY29sb3JzeXMuaHNsX3RvX3JnYiA9IGNvbG9yc3lzLmhzbFRvUmdiID0gY29sb3JzeXMuaHNsMlJnYlxuXG5jb2xvcnN5cy5oc3YyUmdiID0gZnVuY3Rpb24gKGgsIHMsIHYpIHtcbiAgaWYgKHR5cGVvZiBoID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGFyZ3MgPSBoXG4gICAgaCA9IGFyZ3MuaDsgcyA9IGFyZ3MuczsgdiA9IGFyZ3MudjtcbiAgfVxuXG4gIGggPSBfbm9ybWFsaXplQW5nbGUoaClcbiAgaCA9IChoID09PSBIVUVfTUFYKSA/IDEgOiAoaCAlIEhVRV9NQVggLyBwYXJzZUZsb2F0KEhVRV9NQVgpICogNilcbiAgcyA9IChzID09PSBTVl9NQVgpID8gMSA6IChzICUgU1ZfTUFYIC8gcGFyc2VGbG9hdChTVl9NQVgpKVxuICB2ID0gKHYgPT09IFNWX01BWCkgPyAxIDogKHYgJSBTVl9NQVggLyBwYXJzZUZsb2F0KFNWX01BWCkpXG5cbiAgdmFyIGkgPSBNYXRoLmZsb29yKGgpXG4gIHZhciBmID0gaCAtIGlcbiAgdmFyIHAgPSB2ICogKDEgLSBzKVxuICB2YXIgcSA9IHYgKiAoMSAtIGYgKiBzKVxuICB2YXIgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKVxuICB2YXIgbW9kID0gaSAlIDZcbiAgdmFyIHIgPSBbdiwgcSwgcCwgcCwgdCwgdl1bbW9kXVxuICB2YXIgZyA9IFt0LCB2LCB2LCBxLCBwLCBwXVttb2RdXG4gIHZhciBiID0gW3AsIHAsIHQsIHYsIHYsIHFdW21vZF1cblxuICByZXR1cm4ge1xuICAgIHI6IE1hdGguZmxvb3IociAqIFJHQl9NQVgpLFxuICAgIGc6IE1hdGguZmxvb3IoZyAqIFJHQl9NQVgpLFxuICAgIGI6IE1hdGguZmxvb3IoYiAqIFJHQl9NQVgpLFxuICB9XG59XG5cbmNvbG9yc3lzLmhzdl90b19yZ2IgPSBjb2xvcnN5cy5oc3YyUmdiXG5jb2xvcnN5cy5oc3ZUb1JnYiA9IGNvbG9yc3lzLmhzdjJSZ2JcblxuY29sb3JzeXMucmdiMkhleCA9IGZ1bmN0aW9uIChyLCBnLCBiKSB7XG4gIGlmICh0eXBlb2YgciA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBhcmdzID0gclxuICAgIHIgPSBhcmdzLnI7IGcgPSBhcmdzLmc7IGIgPSBhcmdzLmI7XG4gIH1cbiAgciA9IE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpXG4gIGcgPSBNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KVxuICBiID0gTWF0aC5yb3VuZChiKS50b1N0cmluZygxNilcblxuICByID0gci5sZW5ndGggPT09IDEgPyAnMCcgKyByIDogclxuICBnID0gZy5sZW5ndGggPT09IDEgPyAnMCcgKyBnIDogZ1xuICBiID0gYi5sZW5ndGggPT09IDEgPyAnMCcgKyBiIDogYlxuXG4gIHJldHVybiAnIycgKyByICsgZyArIGJcbn1cblxuY29sb3JzeXMucmdiX3RvX2hleCA9IGNvbG9yc3lzLnJnYlRvSGV4ID0gY29sb3JzeXMucmdiMkhleFxuXG5jb2xvcnN5cy5oZXgyUmdiID0gZnVuY3Rpb24gKGhleCkge1xuICB2YXIgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleClcbiAgcmV0dXJuIHJlc3VsdCA/IHtcbiAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxuICB9IDogbnVsbFxufVxuXG5jb2xvcnN5cy5oZXhfdG9fcmdiID0gY29sb3JzeXMuaGV4VG9SZ2IgPSBjb2xvcnN5cy5oZXgyUmdiXG5cbmNvbG9yc3lzLmhzdjJIZXggPSBmdW5jdGlvbiAoaCwgcywgdikge1xuICB2YXIgcmdiID0gY29sb3JzeXMuaHN2MlJnYihoLCBzLCB2KVxuICByZXR1cm4gY29sb3JzeXMucmdiMkhleChyZ2IuciwgcmdiLmcsIHJnYi5iKVxufVxuXG5jb2xvcnN5cy5oc3ZfdG9faGV4ID0gY29sb3JzeXMuaHN2MkhleFxuY29sb3JzeXMuaHN2VG9IZXggPSBjb2xvcnN5cy5oc3YySGV4XG5cbmNvbG9yc3lzLmhleDJIc3YgPSBmdW5jdGlvbiAoaGV4KSB7XG4gIHZhciByZ2IgPSBjb2xvcnN5cy5oZXgyUmdiKGhleClcbiAgcmV0dXJuIGNvbG9yc3lzLnJnYjJIc3YocmdiLnIsIHJnYi5nLCByZ2IuYilcbn1cblxuY29sb3JzeXMuaGV4X3RvX2hzdiA9IGNvbG9yc3lzLmhleFRvSHN2ID0gY29sb3JzeXMuaGV4MkhzdlxuXG5jb2xvcnN5cy5oc2wySGV4ID0gZnVuY3Rpb24gKGgsIHMsIGwpIHtcbiAgdmFyIHJnYiA9IGNvbG9yc3lzLmhzbDJSZ2IoaCwgcywgbClcbiAgcmV0dXJuIGNvbG9yc3lzLnJnYjJIZXgocmdiLnIsIHJnYi5nLCByZ2IuYilcbn1cblxuY29sb3JzeXMuaHNsX3RvX2hleCA9IGNvbG9yc3lzLmhzbFRvSGV4ID0gY29sb3JzeXMuaHNsMkhleFxuXG5jb2xvcnN5cy5oZXgySHNsID0gZnVuY3Rpb24gKGhleCkge1xuICB2YXIgcmdiID0gY29sb3JzeXMuaGV4MlJnYihoZXgpXG4gIHJldHVybiBjb2xvcnN5cy5yZ2IySHNsKHJnYi5yLCByZ2IuZywgcmdiLmIpXG59XG5cbmNvbG9yc3lzLmhleF90b19oc2wgPSBjb2xvcnN5cy5oZXhUb0hzbCA9IGNvbG9yc3lzLmhleDJIc2xcblxuY29sb3JzeXMucmdiMkNteWsgPSBmdW5jdGlvbiAociwgZywgYikge1xuICBpZiAodHlwZW9mIHIgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgYXJncyA9IHJcbiAgICByID0gYXJncy5yOyBnID0gYXJncy5nOyBiID0gYXJncy5iO1xuICB9XG5cbiAgdmFyIHJwcmltID0gciAvIDI1NVxuICB2YXIgZ3ByaW0gPSBnIC8gMjU1XG4gIHZhciBicHJpbSA9IGIgLyAyNTVcblxuICB2YXIgayA9IDEgLSBNYXRoLm1heChycHJpbSwgZ3ByaW0sIGJwcmltKVxuXG4gIHZhciBjID0gKDEgLSBycHJpbSAtIGspIC8gKDEgLSBrKVxuICB2YXIgbSA9ICgxIC0gZ3ByaW0gLSBrKSAvICgxIC0gaylcbiAgdmFyIHkgPSAoMSAtIGJwcmltIC0gaykgLyAoMSAtIGspXG5cbiAgcmV0dXJuIHtcbiAgICBjOiBjLnRvRml4ZWQoMyksXG4gICAgbTogbS50b0ZpeGVkKDMpLFxuICAgIHk6IHkudG9GaXhlZCgzKSxcbiAgICBrOiBrLnRvRml4ZWQoMylcbiAgfVxufVxuXG5jb2xvcnN5cy5yZ2JfdG9fY215ayA9IGNvbG9yc3lzLnJnYlRvQ215ayA9IGNvbG9yc3lzLnJnYjJDbXlrXG5cbmNvbG9yc3lzLmNteWsyUmdiID0gZnVuY3Rpb24gKGMsIG0sIHksIGspIHtcbiAgaWYgKHR5cGVvZiBjID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGFyZ3MgPSBjXG4gICAgYyA9IGFyZ3MuYzsgbSA9IGFyZ3MubTsgeSA9IGFyZ3MueTsgayA9IGFyZ3MuaztcbiAgfVxuXG4gIHZhciByID0gMjU1ICogKDEgLSBjKSAqICgxIC0gaylcbiAgdmFyIGcgPSAyNTUgKiAoMSAtIG0pICogKDEgLSBrKVxuICB2YXIgYiA9IDI1NSAqICgxIC0geSkgKiAoMSAtIGspXG5cbiAgcmV0dXJuIHtcbiAgICByOiBNYXRoLmZsb29yKHIpLFxuICAgIGc6IE1hdGguZmxvb3IoZyksXG4gICAgYjogTWF0aC5mbG9vcihiKVxuICB9XG59XG5cbmNvbG9yc3lzLmNteWtfdG9fcmdiID0gY29sb3JzeXMuY215a1RvUmdiID0gY29sb3JzeXMuY215azJSZ2JcblxuY29sb3JzeXMuaHN2MkhzbCA9IGZ1bmN0aW9uIChoLCBzLCB2KSB7XG4gIGlmICh0eXBlb2YgaCA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBhcmdzID0gaFxuICAgIGggPSBhcmdzLmg7IHMgPSBhcmdzLnM7IHYgPSBhcmdzLnY7XG4gIH1cblxuICB2YXIgbCA9ICgyIC0gcykgKiB2IC8gMlxuXG4gIGlmIChsICE9PSAwKSB7XG4gICAgaWYgKGwgPT09IFNWX01BWCkge1xuICAgICAgcyA9IDBcbiAgICB9IGVsc2UgaWYgKGwgPCBTVl9NQVggLyAyKSB7XG4gICAgICBzID0gcyAqIHYgLyAobCAqIDIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBzICogdiAvICgyIC0gbCAqIDIpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9XG59XG5cbmNvbG9yc3lzLmhzdl90b19oc2wgPSBjb2xvcnN5cy5oc3ZUb0hzbCA9IGNvbG9yc3lzLmhzdjJIc2xcblxuY29sb3JzeXMuaHNsMkhzdiA9IGZ1bmN0aW9uIChoLCBzLCBsKSB7XG4gIGlmICh0eXBlb2YgaCA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBhcmdzID0gaFxuICAgIGggPSBhcmdzLmg7IHMgPSBhcmdzLnM7IGwgPSBhcmdzLmw7XG4gIH1cblxuICBzID0gcyAqIChsIDwgNTAgPyBsIDogKDEwMCAtIGwpKVxuXG4gIHJldHVybiB7XG4gICAgaDogaCxcbiAgICBzOiBNYXRoLmZsb29yKDIgKiBzIC8gKGwgKyBzKSksXG4gICAgdjogTWF0aC5mbG9vcihsICsgcyksXG4gIH1cbn1cblxuY29sb3JzeXMuaHNsX3RvX2hzdiA9IGNvbG9yc3lzLmhzbFRvSHN2ID0gY29sb3JzeXMuaHNsMkhzdlxuXG4vKipcbiogUGFyc2VzIHZhbHVlcyBmcm9tIGEgc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdFxuKiBlLmc6IGhzbGEoMTQwLCAzMCUsIDQwJSwgLjUpID0+IHsgaDogMTQwLCBzOiAzMCwgbDogNDAsIGFscGhhOiAwLjV9XG4qL1xuY29sb3JzeXMucGFyc2VDc3MgPSBmdW5jdGlvbiAoY3NzU3RyaW5nKSB7XG4gIGlmIChjc3NTdHJpbmcuaW5kZXhPZignIycpID4gLTEpIHtcbiAgICByZXR1cm4gY29sb3JzeXMuaGV4MlJnYihjc3NTdHJpbmcpXG4gIH1cblxuICBjb25zdCBwcmVmaXggPSBjc3NTdHJpbmcuc3BsaXQoJygnKVswXVxuICBjb25zdCBhcmdzID0gY3NzU3RyaW5nLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpXG5cbiAgLy8gVXNlIHRoZSBwcmVmaXggYXMgYW4gYXJyYXkgW3IsIGcsIGIsIGFdIHRvIHBhcnNlIHRoZSBjb2xvdXJzXG4gIHJldHVybiBwcmVmaXguc3BsaXQoJycpLnJlZHVjZShmdW5jdGlvbiAoY29sb3IsIHBhcmFtLCBpZHgpIHtcbiAgICBjb25zdCBuZXh0Q29sb3IgPSBjb2xvclxuICAgIG5leHRDb2xvcltwYXJhbV0gPSBwYXJzZUZsb2F0KGFyZ3NbaWR4XSlcbiAgICByZXR1cm4gbmV4dENvbG9yXG4gIH0sIHt9KVxufVxuXG5jb2xvcnN5cy5wYXJzZV9jc3MgPSBjb2xvcnN5cy5wYXJzZUNzc1xuXG5jb2xvcnN5cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGNvbnN0IHByZWZpeCA9IE9iamVjdC5rZXlzKG9iaikuam9pbignJylcbiAgY29uc3QgdmFsdWVzID0gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSBvYmpba2V5XVxuICAgIGlmIChrZXkgPT09ICdzJyB8fCBrZXkgPT09ICd2JyB8fCBrZXkgPT09ICdsJykge1xuICAgICAgdmFsID0gdmFsICsgJyUnXG4gICAgfVxuICAgIHJldHVybiB2YWxcbiAgfSlcbiAgcmV0dXJuIHByZWZpeCArICcoJyArIHZhbHVlcy5qb2luKCcsICcpICsgJyknXG59XG5cbi8vIFdpbGwgcmV0dXJuIGEgcmFuZG9tIGhleCBjb2xvdXJcbmNvbG9yc3lzLnJhbmRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYmFzZSA9ICcwMDAwMDAnXG4gIGNvbnN0IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2Nzc3MjE1KS50b1N0cmluZygxNilcbiAgcmV0dXJuICcjJyArIChiYXNlICsgbnVtYmVyKS5zdWJzdHIoLTYpXG59XG5cbmNvbG9yc3lzLnJvdGF0ZUh1ZSA9IGZ1bmN0aW9uIChodWUsIGFtb3VudCkge1xuICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMDsgfVxuICBjb25zdCBhdXggPSB0eXBlb2YgaHVlID09PSAnb2JqZWN0J1xuICAgICAgPyAoaHVlLmggKyBhbW91bnQpICUgMzYwXG4gICAgICA6IChodWUgKyBhbW91bnQpICUgMzYwXG4gICAgICBcbiAgY29uc3QgbmV4dEh1ZSA9IGF1eCA8IDAgPyAoMzYwICsgYXV4KSA6IGF1eFxuICByZXR1cm4gdHlwZW9mIGh1ZSA9PT0gJ29iamVjdCdcbiAgICAgID8gT2JqZWN0LmFzc2lnbihodWUsIHsgaDogbmV4dEh1ZSB9KVxuICAgICAgOiBuZXh0SHVlXG59XG5cblxuY29sb3JzeXMuZ2V0Q29sb3JFbmNvZGluZyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICBpZiAodHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBjb2xvcnN5cy5oZXgyUmdiKGNvbG9yKVxuICAgICAgcmV0dXJuICdoZXgnXG4gICAgfSBjYXRjaCAoZXJyKSB7IC8qIFNpbGVudCBjYXRjaCAqLyB9XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbG9yICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAndW5rbm93bidcbiAgfVxuXG4gIGlmIChjb2xvci5yICYmIGNvbG9yLmcgJiYgY29sb3IuYikge1xuICAgIHJldHVybiAncmdiJ1xuICB9XG5cbiAgaWYgKGNvbG9yLmggJiYgY29sb3IucyAmJiBjb2xvci52KSB7XG4gICAgcmV0dXJuICdoc3YnXG4gIH1cblxuICBpZiAoY29sb3IuaCAmJiBjb2xvci5zICYmIGNvbG9yLmwpIHtcbiAgICByZXR1cm4gJ2hzbCdcbiAgfVxuXG4gIGlmIChjb2xvci5jICYmIGNvbG9yLm0gJiYgY29sb3IueSAmJiBjb2xvci5rKSB7XG4gICAgcmV0dXJuICdjbXlrJ1xuICB9XG5cbiAgcmV0dXJuICd1bmtub3duJ1xufVxuXG5mdW5jdGlvbiBfbm9ybWFsaXplQW5nbGUgKGRlZ3JlZXMpIHtcbiAgcmV0dXJuIChkZWdyZWVzICUgMzYwICsgMzYwKSAlIDM2MDtcbn1cblxuZnVuY3Rpb24gX2h1ZTJSZ2IgKHAsIHEsIHQpIHtcbiAgaWYgKHQgPCAwKSB0ICs9IDFcbiAgaWYgKHQgPiAxKSB0IC09IDFcbiAgaWYgKHQgPCAxIC8gNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHRcbiAgaWYgKHQgPCAxIC8gMikgcmV0dXJuIHFcbiAgaWYgKHQgPCAyIC8gMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2XG4gIHJldHVybiBwXG59XG5cbi8vIFRPRE86XG4vLyBDcmVhdGUgZGFya2VuIC8gbGlnaHRlbiBtZXRob2RzIHdpdGggc2FtZSBpbnB1dC9vdXRwdXQgZm9ybWF0XG5cbi8vXG4vLyBjb2xvcnN5cy5kYXJrZW4gPSBmdW5jdGlvbiAoY29sb3IpIHtcbi8vICAgY29uc3QgY29sb3JFbmNvZGluZyA9IGNvbG9yc3lzLmdldENvbG9yRW5jb2RpbmcoY29sb3IpXG4vLyAgIGlmIChjb2xvckVuY29kaW5nID09PSAndW5rbm93bicpIHtcbi8vICAgICByZXR1cm4gY29sb3Jcbi8vICAgfVxuXG4vLyAgIGNvbnN0IGhzdiA9IF9nZXRDb2xvckluSHN2KGNvbG9yKVxuLy8gICByZXR1cm4gXG4vLyB9XG5cbi8vXG4vLyBmdW5jdGlvbiBfZ2V0Q29sb3JJbkhzdiAoY29sb3IpIHtcbi8vICAgY29uc3QgY29sb3JFbmNvZGluZyA9IGNvbG9yc3lzLmdldENvbG9yRW5jb2RpbmcoY29sb3IpXG5cbi8vICAgc3dpdGNoIChjb2xvckVuY29kaW5nKSB7XG4vLyAgICAgY2FzZSAnaHN2Jzpcbi8vICAgICAgIHJldHVybiBjb2xvclxuLy8gICAgIGNhc2UgJ3JnYic6XG4vLyAgICAgICByZXR1cm4gcmdiMkhzdihjb2xvcilcbi8vICAgICBjYXNlICdoZXgnOlxuLy8gICAgICAgcmV0dXJuIGhleDJIc3YoY29sb3IpXG4vLyAgICAgY2FzZSAnaHNsJzpcbi8vICAgICAgIHJldHVybiBoc2wySHN2KGNvbG9yKVxuLy8gICAgIGNhc2UgJ2NteWsnOlxuLy8gICAgICAgcmV0dXJuIHJnYjJIc3YoY215azJSZ2IoY29sb3IpKVxuLy8gICAgIGRlZmF1bHQ6XG4vLyAgICAgICByZXR1cm4gJ3Vua25vd24nXG4vLyAgIH1cbi8vIH1cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG59XFxuXFxuY2FudmFzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xcbiAgbWFyZ2luLXRvcDogMWVtO1xcbn1cXG5cXG5oMSB7XFxuICBjb2xvcjogcmVkO1xcbn1cXG5cXG5kaXYudXBsb2FkLXdyYXBwZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5kaXYudXBsb2FkLXdyYXBwZXIgaW5wdXRbdHlwZT1maWxlXSB7XFxuICBmb250LXNpemU6IDEwMHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbmJ1dHRvbi5waG90by1zdWJtaXR0ZXIsXFxuYnV0dG9uI3J1bi1hbmFseXNpcyB7XFxuICBwYWRkaW5nOiAuNWVtO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGZvbnQtc2l6ZTogMS4xZW07XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW4tYm90dG9tOiAxZW07XFxufVxcblxcbmJ1dHRvbiNydW4tYW5hbHlzaXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5idXR0b24jcnVuLWFuYWx5c2lzOmhvdmVye1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JkMmMyMztcXG59XFxuXFxuYnV0dG9uLnBob3RvLXN1Ym1pdHRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcbmJ1dHRvbi5waG90by1zdWJtaXR0ZXI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNlMTUzZTtcXG59XFxuXFxuLmNvbnRhaW5lci1ibG9jayB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbn1cXG5cXG4uY29udGFpbmVyLWxpbmUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG59XFxuXFxuLmNhbnZhcy1ob2xkZXIge1xcbiAgbWFyZ2luLXJpZ2h0OiAyZW07XFxuICBmbGV4OiBhdXRvIDEgMTtcXG59XFxuXFxuLmNhbnZhcy1ob2xkZXIgYSB7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2FiZmJmO1xcbiAgcGFkZGluZzogMnB4IDNweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLmNhbnZhcy1ob2xkZXIgYS5hdmFpbGFibGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5OGU1MjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNhbnZhcy1ob2xkZXIgYS5hdmFpbGFibGU6aG92ZXIsXFxuIC5jYW52YXMtaG9sZGVyIGEuYXZhaWxhYmxlOmFjdGl2ZSB7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xcbiAgLmNvbnRhaW5lci1ibG9jayB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4ZDcxOTk5ZDVhNjc0YjQ3NzQ0MDA5NjdhYTFlODUwMy5wbmdcIjsiLCJjb25zdCBjb2xvcnN5cyA9IHJlcXVpcmUoJ2NvbG9yc3lzJylcblxuLy9Tb3J0IG9uIGJyaWdodG5lc3MgLSB0aGUgViBpbiBoc3ZcbmV4cG9ydCBjb25zdCBzb3J0QnJpZ2h0bmVzcyA9IChjb2xvckRhdGEpID0+IHtcbiAgY29uc3QgY1BsdXNIc3YgPSBhZGRUb0NvbG9yKGNvbG9yRGF0YSwgY29sb3JzeXMucmdiX3RvX2hzdiwgXCJ2XCIpO1xuICByZXR1cm4gY1BsdXNIc3Yuc29ydCgoYSxiKSA9PiB7XG4gICAgcmV0dXJuIGEudiAtIGIudlxuICB9KVxufVxuXG4vL1NvcnQgb24gbGlnaHRuZXNzIC0gdGhlIEwgaW4gaHNsXG5leHBvcnQgY29uc3Qgc29ydExpZ2h0bmVzcyA9IChjb2xvckRhdGEpID0+IHtcbiBjb25zdCBjUGx1c0hzbCA9IGFkZFRvQ29sb3IoY29sb3JEYXRhLCBjb2xvcnN5cy5yZ2JfdG9faHNsLCBcImxcIik7XG4gIHJldHVybiBjUGx1c0hzbC5zb3J0KChhLCBiKSA9PiB7XG4gICAgcmV0dXJuIGEubCAtIGIubFxuICB9KVxufVxuXG5jb25zdCBhZGRUb0NvbG9yID0gKGRhdGEsIGZ1bmMsIHByb3ApID0+IHtcbiAgcmV0dXJuIGRhdGEubWFwKCBkID0+IHtcbiAgICBsZXQgW3IsIGcsIGJdID0gZDtcbiAgICBsZXQgbmV3Q29sb3IgPSBmdW5jKHIsIGcsIGIpO1xuICAgIHJldHVybiB7IHIsIGcsIGIsIFtwcm9wXTogbmV3Q29sb3JbcHJvcF0gfSAvLyB7ciBnIGIgbH0gb3Ige3IgZyBiIHZ9XG4gIH0pXG59XG4iLCJpbXBvcnQge3NvcnRMaWdodG5lc3MsIHNvcnRCcmlnaHRuZXNzfSBmcm9tICcuL2NvbG91clNvcnRlci5qcydcblxuZXhwb3J0IGNvbnN0IGdldFBpeGVsRGF0YSA9IChjdHgsIGJsb2NrSGVpZ2h0LCBibG9ja1dpZHRoLCBoZWlnaHQsIHdpZHRoLCBjb2xvclByb3ApID0+IHtcbiAgbGV0IHZjQmxvY2sgPSBibG9ja0hlaWdodCAvIDJcbiAgbGV0IGhjQmxvY2sgPSBibG9ja1dpZHRoIC8gMlxuXG4gIGxldCB2UG9pbnRzID0gW11cbiAgbGV0IGhQb2ludHMgPSBbXVxuXG4gIGZvcihsZXQgaT12Y0Jsb2NrOyBpIDwgaGVpZ2h0OyBpICs9IGJsb2NrSGVpZ2h0KXtcbiAgICB2UG9pbnRzLnB1c2goaSlcbiAgfVxuXG4gIGZvcihsZXQgaT1oY0Jsb2NrOyBpIDwgd2lkdGg7IGkrPSBibG9ja1dpZHRoKXtcbiAgICBoUG9pbnRzLnB1c2goaSlcbiAgfVxuXG4gIGNvbnN0IGFsbFBvaW50cyA9IHZQb2ludHMucmVkdWNlKChhY2MsY3VycikgPT4ge1xuICAgIGxldCByb3cgPSBoUG9pbnRzLm1hcChocG9pbnQgPT4ge1xuICAgICAgICByZXR1cm4gW2hwb2ludCwgY3Vycl07XG4gICAgfSlcbiAgICByZXR1cm4gYWNjLmNvbmNhdChyb3cpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY29sb3JEYXRhID0gYWxsUG9pbnRzLm1hcCgocG9pbnQpID0+IHtcbiAgICAgIGxldCBwaXhlbERhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKHBvaW50WzBdLCBwb2ludFsxXSwgMSwgMSkuZGF0YTtcbiAgICAgIHJldHVybiBwaXhlbERhdGE7XG4gIH0pO1xuXG4gIGlmKGNvbG9yUHJvcCA9PT0gXCJsXCIpIHtcbiAgICByZXR1cm4gc29ydExpZ2h0bmVzcyhjb2xvckRhdGEpXG4gIH0gZWxzZSBpZihjb2xvclByb3AgPT09IFwidlwiKSB7XG4gICAgcmV0dXJuIHNvcnRCcmlnaHRuZXNzKGNvbG9yRGF0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7c2V0dXBEb3dubG9hZEJ1dHRvbn0gZnJvbSBcIi4vZmlsZWhhbmRsZXIuanNcIlxuXG5leHBvcnQgY29uc3QgZHJhd2VyT3V0cHV0ID0gKG9yaWdDb2xvcnMsIGhlaWdodCwgd2lkdGgsIGlkLCBibG9ja0hlaWdodCwgYmxvY2tXaWR0aCwgZmlsZW5hbWUpID0+IHtcbiAgbGV0IGN0eCA9IGNhbnZhc1NldFVwKGlkLCBoZWlnaHQsIHdpZHRoKTtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG5cbiAgbGV0IHhTdGFydFBvaW50cyA9IFtdXG4gIGxldCB5U3RhcnRQb2ludHMgPSBbXVxuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkgKz0gYmxvY2tIZWlnaHQpe1xuICAgIHlTdGFydFBvaW50cy5wdXNoKGkpXG4gIH1cblxuICBmb3IobGV0IGkgPSAwOyBpIDwgd2lkdGg7IGkgKz0gYmxvY2tXaWR0aCl7XG4gICAgeFN0YXJ0UG9pbnRzLnB1c2goaSlcbiAgfVxuXG4gIGNvbnN0IGFsbFN0YXJ0UG9pbnRzID0geFN0YXJ0UG9pbnRzLnJlZHVjZSgoYWNjLGN1cnIpID0+IHtcbiAgICBsZXQgcm93ID0geVN0YXJ0UG9pbnRzLm1hcCh5UG9pbnQgPT4ge1xuICAgICAgcmV0dXJuIFtjdXJyLCB5UG9pbnRdXG4gICAgfSlcbiAgICByZXR1cm4gYWNjLmNvbmNhdChyb3cpXG4gIH0sW10pXG5cbiAgYWxsU3RhcnRQb2ludHMuZm9yRWFjaCgoY29vcmQsIGkpID0+IHtcbiAgICAgIGN0eC5maWxsUmVjdChjb29yZFswXSwgY29vcmRbMV0sIGJsb2NrV2lkdGgsIGJsb2NrSGVpZ2h0KVxuICAgICAgaWYob3JpZ0NvbG9yc1tpXSl7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBgcmdiKCR7b3JpZ0NvbG9yc1tpXS5yfSwgJHtvcmlnQ29sb3JzW2ldLmd9LCAke29yaWdDb2xvcnNbaV0uYn0pYFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdncmVlbidcbiAgICAgIH1cbiAgfSlcbiAgc2V0dXBEb3dubG9hZEJ1dHRvbihpZCwgZmlsZW5hbWUpO1xufVxuXG5cbmV4cG9ydCBjb25zdCBjYW52YXNTZXRVcCA9IChpZCwgaCwgdykgPT4ge1xuICBjb25zdCBjdnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZClcbiAgY3ZzLmhlaWdodCA9IGg7XG4gIGN2cy53aWR0aCA9IHc7XG4gIHJldHVybiBjdnMuZ2V0Q29udGV4dCgnMmQnKTtcbn1cbiIsIlxuXG5leHBvcnQgY29uc3Qgc2V0dXBEb3dubG9hZEJ1dHRvbiA9IChpZCwgZmlsZW5hbWUpID0+IHtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2lkfS1kb3dubG9hZGApO1xuXG4gIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAnY2xpY2snLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2lkfWApO1xuICAgICAgbGluay5ocmVmID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgbGluay5kb3dubG9hZCA9IGAke2ZpbGVuYW1lfS0ke2lkfWA7XG4gICAgfSxcbiAgICBmYWxzZVxuICApO1xuXG4gIGxpbmsuY2xhc3NMaXN0LmFkZCgnYXZhaWxhYmxlJyk7XG59XG4iLCJpbXBvcnQge2dldFBpeGVsRGF0YX0gZnJvbSBcIi4vY29sb3VyR2V0dGVyLmpzXCJcblxuaW1wb3J0IHtjYW52YXNTZXRVcCwgZHJhd2VyT3V0cHV0fSBmcm9tIFwiLi9jb2xvckRyYXdlci5qc1wiXG5pbXBvcnQgJy4vc3R5bGVzLmNzcydcbmltcG9ydCBpbWcgZnJvbSAgXCIuL2Jsb2NrczEucG5nXCJcblxuLy9pbWFnZSAtIDE2IGJsb2NrcyBoaWdoLCA5IHdpZGUgLSBlYWNoIGJsb2NrIDMxLjI1IGhpZ2gsXG4vLyBodHRwczovL291cmNvZGV3b3JsZC5jb20vYXJ0aWNsZXMvcmVhZC8xODUvaG93LXRvLWdldC10aGUtcGl4ZWwtY29sb3ItZnJvbS1hLWNhbnZhcy1vbi1jbGljay1vci1tb3VzZS1ldmVudC13aXRoLWphdmFzY3JpcHRcbmNvbnN0IGhlaWdodCA9IDUwMDtcbmNvbnN0IHdpZHRoID0gMzAwO1xuY29uc3QgdmVydGljYWxCbG9ja3MgPSAxNjtcbmNvbnN0IGhvcml6b250YWxCbG9ja3MgPSA5O1xuXG5jb25zdCBibG9ja1dpZHRoID0gMzMuMzMzMzM7XG5jb25zdCBibG9ja0hlaWdodCA9IDMxLjI1O1xuXG5jb25zdCBoTGluZSA9IGJsb2NrSGVpZ2h0O1xuY29uc3Qgd0xpbmUgPSBibG9ja1dpZHRoICogMTQ0OyAvLyBudW1iZXIgb2YgYmxvY2tzXG5cbmNvbnN0IGluaXQgPSAoKSA9PiB7XG4gIGZpbGVTZWxlY3RvcigpO1xufVxuXG5jb25zdCBmaWxlU2VsZWN0b3IgPSAoKSA9PiB7XG4gIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaG90by1zdWJtaXR0ZXInKTtcbiAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgJ2NoYW5nZScsXG4gICAgbW91bnRGaWxlLFxuICAgIGZhbHNlXG4gIClcbn1cblxuY29uc3QgbW91bnRGaWxlID0gKGUpID0+IHtcbiAgbGV0IGZpbGUgPSBlLnRhcmdldC5maWxlc1swXTtcbiAgbGV0IGZpbGVuYW1lID0gZmlsZS5uYW1lO1xuICBsZXQgcmVhZGVyICA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGxldCBjdHggPSBjYW52YXNTZXRVcCgnY2FudmFzJywgaGVpZ2h0LCB3aWR0aCk7XG4gIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgaW1nLmNyb3Nzb3JpZ2luID0gJ2Fub255bW91cyc7XG5cbiAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgVVJMLnJldm9rZU9iamVjdFVSTChpbWcuc3JjKVxuICB9XG4gIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICBkcmF3ZXIoY3R4LCBmaWxlbmFtZSlcbn1cblxuY29uc3QgZHJhd2VyID0gKGN0eCwgZmlsZW5hbWUpID0+IHtcbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJydW4tYW5hbHlzaXNcIilcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IG9yaWdDb2xvcnNMID0gZ2V0UGl4ZWxEYXRhKGN0eCwgYmxvY2tIZWlnaHQsIGJsb2NrV2lkdGgsIGhlaWdodCwgd2lkdGgsIFwibFwiLCBmaWxlbmFtZSk7XG4gICAgY29uc3Qgb3JpZ0NvbG9yc0IgPSBnZXRQaXhlbERhdGEoY3R4LCBibG9ja0hlaWdodCwgYmxvY2tXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgXCJ2XCIsIGZpbGVuYW1lKTtcbiAgICBjcmVhdGVOZXdDYW52YXNlcyhvcmlnQ29sb3JzTCwgb3JpZ0NvbG9yc0IpO1xuICB9LCBmYWxzZSk7XG59XG5cbmNvbnN0IGNyZWF0ZU5ld0NhbnZhc2VzID0gKG9yaWdDb2xvcnNMLCBvcmlnQ29sb3JzQikgPT4ge1xuICAvLyBibG9jayBjYW52YXNlc1xuICBkcmF3ZXJPdXRwdXQob3JpZ0NvbG9yc0wsIGhlaWdodCwgd2lkdGgsICdibG9ja0xpZ2h0bmVzcycsIGJsb2NrSGVpZ2h0LCBibG9ja1dpZHRoKTtcbiAgZHJhd2VyT3V0cHV0KG9yaWdDb2xvcnNCLCBoZWlnaHQsIHdpZHRoLCAnYmxvY2tCcmlnaHRuZXNzJywgYmxvY2tIZWlnaHQsIGJsb2NrV2lkdGgpOyAvLyB2IGlzIHRoZSB2IGluIGhzdiBha2EgYnJpZ2h0bmVzc1xuXG4gIC8vIGxpbmUgY2FudmFzZXNcbiAgZHJhd2VyT3V0cHV0KG9yaWdDb2xvcnNMLCBoTGluZSwgd0xpbmUsICdsaW5lTGlnaHRuZXNzJywgYmxvY2tIZWlnaHQsIGJsb2NrV2lkdGgpO1xuICBkcmF3ZXJPdXRwdXQob3JpZ0NvbG9yc0IsIGhMaW5lLCB3TGluZSwgJ2xpbmVCcmlnaHRuZXNzJywgYmxvY2tIZWlnaHQsIGJsb2NrV2lkdGgpO1xufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBpbml0KCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9