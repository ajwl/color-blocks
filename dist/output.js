!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){var n=t.exports={};function r(t){return(t%360+360)%360}function o(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}n.rgb2Hsl=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}t=255===t?1:t%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255),n=255===n?1:n%255/parseFloat(255);var r,o,a=Math.max(t,e,n),i=Math.min(t,e,n),s=(a+i)/2;if(a===i)r=o=0;else{var l=a-i;switch(o=s>.5?l/(2-a-i):l/(a+i),a){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return{h:Math.round(360*r),s:Math.round(100*o),l:Math.round(100*s)}},n.rgb_to_hsl=n.rgbToHsl=n.rgb2Hsl,n.rgb2Hsv=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}t=255===t?1:t%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255),n=255===n?1:n%255/parseFloat(255);var r,o,a=Math.max(t,e,n),i=Math.min(t,e,n),s=a,l=a-i;if(o=0===a?0:l/a,a===i)r=0;else{switch(a){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return{h:Math.round(360*r),s:Math.round(100*o),v:Math.round(100*s)}},n.rgb_to_hsv=n.rgbToHsv=n.rgb2Hsv,n.hsl2Rgb=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.l}var a,i,s;if(t=360===(t=r(t))?1:t%360/parseFloat(360),e=100===e?1:e%100/parseFloat(100),n=100===n?1:n%100/parseFloat(100),0===e)a=i=s=n;else{var l=n<.5?n*(1+e):n+e-n*e,c=2*n-l;a=o(c,l,t+1/3),i=o(c,l,t),s=o(c,l,t-1/3)}return{r:Math.round(255*a),g:Math.round(255*i),b:Math.round(255*s)}},n.hsl_to_rgb=n.hslToRgb=n.hsl2Rgb,n.hsv2Rgb=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.v}t=360===(t=r(t))?1:t%360/parseFloat(360)*6,e=100===e?1:e%100/parseFloat(100),n=100===n?1:n%100/parseFloat(100);var o=Math.floor(t),a=t-o,i=n*(1-e),s=n*(1-a*e),l=n*(1-(1-a)*e),c=o%6,u=[n,s,i,i,l,n][c],f=[l,n,n,s,i,i][c],h=[i,i,l,n,n,s][c];return{r:Math.floor(255*u),g:Math.floor(255*f),b:Math.floor(255*h)}},n.hsv_to_rgb=n.hsv2Rgb,n.hsvToRgb=n.hsv2Rgb,n.rgb2Hex=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}return t=Math.round(t).toString(16),e=Math.round(e).toString(16),n=Math.round(n).toString(16),"#"+(t=1===t.length?"0"+t:t)+(e=1===e.length?"0"+e:e)+(n=1===n.length?"0"+n:n)},n.rgb_to_hex=n.rgbToHex=n.rgb2Hex,n.hex2Rgb=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null},n.hex_to_rgb=n.hexToRgb=n.hex2Rgb,n.hsv2Hex=function(t,e,r){var o=n.hsv2Rgb(t,e,r);return n.rgb2Hex(o.r,o.g,o.b)},n.hsv_to_hex=n.hsv2Hex,n.hsvToHex=n.hsv2Hex,n.hex2Hsv=function(t){var e=n.hex2Rgb(t);return n.rgb2Hsv(e.r,e.g,e.b)},n.hex_to_hsv=n.hexToHsv=n.hex2Hsv,n.hsl2Hex=function(t,e,r){var o=n.hsl2Rgb(t,e,r);return n.rgb2Hex(o.r,o.g,o.b)},n.hsl_to_hex=n.hslToHex=n.hsl2Hex,n.hex2Hsl=function(t){var e=n.hex2Rgb(t);return n.rgb2Hsl(e.r,e.g,e.b)},n.hex_to_hsl=n.hexToHsl=n.hex2Hsl,n.rgb2Cmyk=function(t,e,n){if("object"==typeof t){const r=t;t=r.r,e=r.g,n=r.b}var r=t/255,o=e/255,a=n/255,i=1-Math.max(r,o,a),s=(1-o-i)/(1-i),l=(1-a-i)/(1-i);return{c:((1-r-i)/(1-i)).toFixed(3),m:s.toFixed(3),y:l.toFixed(3),k:i.toFixed(3)}},n.rgb_to_cmyk=n.rgbToCmyk=n.rgb2Cmyk,n.cmyk2Rgb=function(t,e,n,r){if("object"==typeof t){const o=t;t=o.c,e=o.m,n=o.y,r=o.k}var o=255*(1-t)*(1-r),a=255*(1-e)*(1-r),i=255*(1-n)*(1-r);return{r:Math.floor(o),g:Math.floor(a),b:Math.floor(i)}},n.cmyk_to_rgb=n.cmykToRgb=n.cmyk2Rgb,n.hsv2Hsl=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.v}var r=(2-e)*n/2;return 0!==r&&(e=100===r?0:r<50?e*n/(2*r):e*n/(2-2*r)),{h:t,s:e,l:r}},n.hsv_to_hsl=n.hsvToHsl=n.hsv2Hsl,n.hsl2Hsv=function(t,e,n){if("object"==typeof t){const r=t;t=r.h,e=r.s,n=r.l}return e*=n<50?n:100-n,{h:t,s:Math.floor(2*e/(n+e)),v:Math.floor(n+e)}},n.hsl_to_hsv=n.hslToHsv=n.hsl2Hsv,n.parseCss=function(t){if(t.indexOf("#")>-1)return n.hex2Rgb(t);const e=t.split("(")[0],r=t.split("(")[1].split(")")[0].split(",");return e.split("").reduce(function(t,e,n){const o=t;return o[e]=parseFloat(r[n]),o},{})},n.parse_css=n.parseCss,n.stringify=function(t){return Object.keys(t).join("")+"("+Object.keys(t).map(function(e){var n=t[e];return"s"!==e&&"v"!==e&&"l"!==e||(n+="%"),n}).join(", ")+")"},n.random=function(){return"#"+("000000"+Math.floor(16777215*Math.random()).toString(16)).substr(-6)},n.rotateHue=function(t,e){void 0===e&&(e=0);const n="object"==typeof t?(t.h+e)%360:(t+e)%360,r=n<0?360+n:n;return"object"==typeof t?Object.assign(t,{h:r}):r},n.getColorEncoding=function(t){if("string"==typeof t)try{return n.hex2Rgb(t),"hex"}catch(t){}return"object"!=typeof t?"unknown":t.r&&t.g&&t.b?"rgb":t.h&&t.s&&t.v?"hsv":t.h&&t.s&&t.l?"hsl":t.c&&t.m&&t.y&&t.k?"cmyk":"unknown"}},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"\nbody {\n  font-family: sans-serif;\n}\n\ncanvas {\n  display: block;\n  margin-top: 1em;\n}\n\nh1 {\n  color: red;\n}\n\n/* Buttons and actions */\ndiv.upload-wrapper {\n  display: block;\n  margin-bottom: .5em;\n}\n\ndiv.upload-wrapper input[type=file] {\n  height: 0.1px;\n  width: 0.1px;\n  position: absolute;\n  left: 0;\n  top: 0;\n  opacity: 0;\n}\n\nlabel.photo,\nbutton#run-analysis {\n  padding: .5em;\n  font-weight: 500;\n  font-size: 1.1em;\n  cursor: pointer;\n  margin-bottom: 1em;\n}\n\nbutton#run-analysis {\n  background-color: red;\n  color: white;\n}\nbutton#run-analysis:hover{\n  background-color: #bd2c23;\n}\n\nlabel.photo {\n  background-color: purple;\n  color: white;\n  line-height: 2.2em;\n}\ninput[type=file]:hover + label.photo {\n  background-color: #3e153e;\n  cursor: pointer;\n}\n\n/* Body styles */\n.block,\n.line,\n.get-colours-wrapper {\n  display:none;\n}\n\n.photo-uploaded .get-colours-wrapper {\n  display: block;\n}\n\n.get-colours .block,\n.get-colours .line {\n  display: block;\n}\n\n.is-multiple.get-colours .block,\n.is-multiple.get-colours #lineBrightness {\n  display: none;\n}\n\n.get-colours #lineBrightness {\n  display: block;\n}\n\n.container-block {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1em;\n}\n\n.container-line {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  margin-bottom: .5em;\n}\n\n.canvas-holder {\n  padding-bottom: 1.5em;\n  flex: auto 1 1;\n}\n\n.canvas-holder a {\n  font-weight: 500;\n  border: 1px solid black;\n  background-color: #cabfbf;\n  padding: 2px 3px;\n  text-decoration: none;\n  margin-bottom: .5em;\n}\n\n.canvas-holder a.available {\n  background-color: #f98e52;\n  cursor: pointer;\n}\n\n.canvas-holder a.available:hover,\n .canvas-holder a.available:active {\n  color: white;\n}\n\n@media (max-width: 700px) {\n  .container-block {\n    flex-direction: column;\n  }\n}\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<t.length;o++){var i=t[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),e.push(i))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),i=null,s=0,l=[],c=n(5);function u(t,e){for(var n=0;n<t.length;n++){var o=t[n],a=r[o.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](o.parts[i]);for(;i<o.parts.length;i++)a.parts.push(g(o.parts[i],e))}else{var s=[];for(i=0;i<o.parts.length;i++)s.push(g(o.parts[i],e));r[o.id]={id:o.id,refs:1,parts:s}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var a=t[o],i=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function h(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function p(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,r,o,a;if(e.transform&&t.css){if(!(a=e.transform(t.css)))return function(){};t.css=a}if(e.singleton){var l=s++;n=i||(i=p(e)),r=m.bind(null,n,l,!1),o=m.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,a=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,e),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return u(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var i=n[a];(s=r[i.id]).refs--,o.push(s)}t&&u(f(t,e),e);for(a=0;a<o.length;a++){var s;if(0===(s=o[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var v=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function m(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=v(e,o);else{var a=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(a,i[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){"use strict";n.r(e);const r=n(0),o=(t,e,n)=>t.map(t=>{let[r,o,a]=t,i=e(r,o,a);return{r:r,g:o,b:a,[n]:i[n]}}),a=(t,e,n,a,i,s)=>{let l=n/2,c=[],u=[];for(let t=e/2;t<a;t+=e)c.push(t);for(let t=l;t<i;t+=n)u.push(t);const f=c.reduce((t,e)=>{let n=u.map(t=>[t,e]);return t.concat(n)},[]).map(e=>{return t.getImageData(e[0],e[1],1,1).data});return"l"===s?(t=>{return o(t,r.rgb_to_hsl,"l").sort((t,e)=>t.l-e.l)})(f):"v"===s?(t=>{return o(t,r.rgb_to_hsv,"v").sort((t,e)=>t.v-e.v)})(f):void 0},i=(t,e,n,r,o,a)=>{let{ctx:i,dlButton:l}=s(r,e,n),c=[],u=[];for(let t=0;t<e;t+=o)u.push(t);for(let t=0;t<n;t+=o)c.push(t);c.reduce((t,e)=>{let n=u.map(t=>[e,t]);return t.concat(n)},[]).forEach((e,n)=>{i.fillRect(e[0],e[1],o,o),t[n]?i.fillStyle=`rgb(${t[n].r}, ${t[n].g}, ${t[n].b})`:i.fillStyle="white"}),l&&((t,e,n)=>{t.addEventListener("click",()=>{const r=document.getElementById(`${e}`).querySelector("canvas");t.href=r.toDataURL(),t.download=`${n}-${e}`},!1),t.classList.add("available")})(l,r,a)},s=(t,e,n)=>{const r=document.getElementById(t),o=document.createElement("canvas");if(o.height=e,o.width=n,r.appendChild(o),r.classList.contains("canvas-holder")){const e=document.createElement("a");return e.id=`download-${t}`,e.textContent=`Download - ${t}`,r.appendChild(e),{ctx:o.getContext("2d"),dlButton:e}}return{ctx:o.getContext("2d"),dlButton:null}};n(1);const l=document.querySelector("main"),c=document.querySelector("label.photo"),u=window.outerWidth,f=t=>{document.getElementById("image-holder").innerHTML="",document.querySelectorAll(".canvas-holder").forEach(t=>t.innerHTML="");let e=Array.from(t.target.files),n=e.length>1;e.forEach(t=>{h(t,n)})},h=(t,e)=>{let n=t.name,{ctx:r,dlButton:o}=s("image-holder",400,400),a=(new FileReader,new Image);a.crossorigin="anonymous",a.correctOrientation=!0,a.onload=(()=>{let[t,o]=((t,e,n,r)=>{const o=e/t;if(o<1)return[n,n*o];return[r/o,r]})(a.width,a.height,400,400);r.drawImage(a,0,0,t,o),URL.revokeObjectURL(a.src),d(r,n,{w:t,h:o,lineOnly:e}),l.classList.add("photo-uploaded")}),a.src=URL.createObjectURL(t)},d=(t,e,n)=>{n.lineOnly?(b(t,e,n),l.classList.add("is-multiple")):(p(t,e,n),l.classList.remove("is-multiple"))},p=(t,e,n)=>{const r=a(t,25,25,n.h,n.w,"l"),o=a(t,25,25,n.h,n.w,"v");n.origColorsL=r,n.origColorsB=o,n.filename=e.replace(/\.[^/.]+$/,""),v(n,r,o),g()},b=(t,e,n)=>{const r=a(t,25,25,n.h,n.w,"l");n.filename=e.replace(/\.[^/.]+$/,""),v(n,r,[]),g()},g=()=>{l.classList.add("get-colours"),c.textContent="Upload another photo",u<400&&l.scrollTo(0,600)},v=(t,e,n)=>{const r=25*((t,e,n)=>{let r,o;return t>e?(r=15,o=e/n):(r=t/n,o=15),o*r})(t.w,t.h,25);t.lineOnly?i(e,25,r,"lineLightness",25,t.filename):(i(e,t.h,t.w,"blockLightness",25,t.filename),i(n,t.h,t.w,"blockBrightness",25,t.filename),i(t.origColorsL,25,r,"lineLightness",25,t.filename),i(t.origColorsB,25,r,"lineBrightness",25,t.filename))};document.getElementById("photo-submitter").addEventListener("change",f,!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,